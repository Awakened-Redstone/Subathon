package com.awakenedredstone.subathon.util;

import org.apache.commons.io.FileUtils;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.util.Optional;

/*
* Comments generated by ChatGPT
*/

public class FileUtil {

    // Reads the contents of a file and returns them as a String wrapped in an Optional
    public static Optional<String> readFile(File file) {
        try {
            // Attempt to read the file and return its contents as a String
            return Optional.of(FileUtils.readFileToString(file, StandardCharsets.UTF_8));
        } catch (IOException | NullPointerException e) {
            // If an exception is thrown, return an empty Optional
            return Optional.empty();
        }
    }

    // Reads the contents of a file and returns them as an InputStream wrapped in an Optional
    public static Optional<InputStream> readFileStream(File file) {
        try {
            // Attempt to read the file and return its contents as an InputStream
            return Optional.of(new ByteArrayInputStream(FileUtils.readFileToByteArray(file)));
        } catch (IOException | NullPointerException e) {
            // If an exception is thrown, return an empty Optional
            return Optional.empty();
        }
    }

    // Writes a String to a file, ignoring any exceptions that might be thrown
    public static void writeFile(File file, String data) {
        try {
            FileUtils.writeStringToFile(file, data, StandardCharsets.UTF_8);
        } catch (IOException ignored) {}
    }

    // Writes a byte array to a file, ignoring any exceptions that might be thrown
    public static void writeFileBytes(File file, byte[] data) {
        try {
            FileUtils.writeByteArrayToFile(file, data);
        } catch (IOException ignored) {}
    }

    // Attempts to delete a file at the given Path, ignoring any exceptions that might be thrown
    public static void delete(Path path) {
        try {
            FileUtils.forceDelete(path.toFile());
        } catch (IOException ignored) {}
    }

    // Attempts to delete the given File, ignoring any exceptions that might be thrown
    public static void delete(File file) {
        try {
            FileUtils.forceDelete(file);
        } catch (IOException ignored) {}
    }
}
