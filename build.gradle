import com.modrinth.minotaur.TaskModrinthUpload
import net.fabricmc.loom.task.RemapJarTask
import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.135'
    }
}

plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id "org.ajoberstar.grgit" version "3.1.0"
    id "com.modrinth.minotaur" version "1.1.0"
    id 'maven-publish'
}

def ENV = System.getenv()

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name "ClothConfigAPI"
        url "https://maven.shedaniel.me/"
    }
    maven {
        name "ModMenu"
        url "https://maven.terraformersmc.com/releases/"
    }
    maven {
        url = "https://minecraft.guntram.de/maven/"
    }
}
dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "de.guntram.mcmod:crowdin-translate:1.2"
    include "de.guntram.mcmod:crowdin-translate:1.2"

    modImplementation("com.github.twitch4j:twitch4j:${project.twitch4j_version}") {
        exclude group: 'org.slf4j'
        exclude group: 'commons-io', module: 'commons-io'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}

task createResourcePack (type: Copy, dependsOn: remapMavenJar) {
    into layout.buildDirectory

    //Clear directory
    delete "build/resoursepack"

    // Create directories
    mkdir "build/resoursepack"
    mkdir "build/resoursepack/assets"
    mkdir "build/resoursepack/assets/subathon"
    mkdir "build/resoursepack/assets/subathon/lang"

    //Create MCMETA file
    new File(projectDir, "build/resoursepack/pack.mcmeta").text = """{
   "pack": {
      "pack_format": 8,
      "description": "Subathon ${project.version} translations"
   }
}
"""

    into('resoursepack') {
        from "src/main/resources/assets/subathon/icon.png"
        rename 'icon.png', 'pack.png'
    }


    into("resoursepack/assets/subathon/lang") {
        from "src/main/resources/assets/subathon/lang"
    }
}

task zipResourcePack (type: Zip, dependsOn: createResourcePack) {

    archiveFileName = "subathon-${project.version}-translations.zip"
    destinationDirectory = layout.buildDirectory.dir('libs')

    from layout.buildDirectory.dir("resoursepack")
}

build.dependsOn zipResourcePack

def getBranch() {
    def ENV = System.getenv()
    if (ENV.GITHUB_REF) {
        def branch = ENV.GITHUB_REF
        return branch.substring(branch.lastIndexOf("/") + 1)
    }

    if (grgit == null) {
        return "unknown"
    }

    def branch = grgit.branch.current().name
    return branch.substring(branch.lastIndexOf("/") + 1)
}

task github(dependsOn: zipResourcePack) {
    onlyIf {
        ENV.GITHUB_TOKEN
    }

    doLast {
        def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
        def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

        def releaseBuilder = new GHReleaseBuilder(repository, version as String)
        releaseBuilder.name("[$project.minecraft_version] Subathon - $project.version")
        releaseBuilder.body(ENV.CHANGELOG ?: "No changelog provided")
        releaseBuilder.commitish(getBranch())

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
        ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${project.version}-translations.zip"), "application/zip");
    }
}

task modrinth(type: TaskModrinthUpload, dependsOn: zipResourcePack) {
    onlyIf {
        ENV.MODRINTH_TOKEN
    }

    token = ENV.MODRINTH_TOKEN
    projectId = "amLXPXxi"
    versionNumber = version
    versionName = "[$project.minecraft_version] Subathon - $project.version"
    releaseType = "release"
    changelog = ENV.CHANGELOG ?: "No changelog provided"

    uploadFile = remapJar
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${project.version}-translations.zip")

    addGameVersion(project.minecraft_version)
    addLoader('fabric')
}
