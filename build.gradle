import com.modrinth.minotaur.dependencies.ModDependency
import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
}

loom {
    accessWidenerPath = file("src/main/resources/subathon.accesswidener")
}

def ENV = System.getenv()

version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    maven { url "https://maven.terraformersmc.com/releases/" } //ModMenu
    maven { url "https://maven.wispforest.io" } //owo-lib
    maven { url "https://maven.awakenedredstone.com"} //Twitch4J (Fabric)
    maven { url "https://maven.nucleoid.xyz/" } //stimuli && placeholder api
    maven { url "https://ladysnake.jfrog.io/artifactory/mods" } //cardinal-components
    maven { url 'https://jitpack.io' } //Mixin extras
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
    include "io.wispforest:owo-sentinel:${project.owo_version}"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-api:${project.cardinal_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cardinal_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_version}"

    modImplementation "com.github.twitch4j:twitch4j-fabric:${project.twitch4j_version}"
    modImplementation include("xyz.nucleoid:stimuli:${project.stimuli_version}")
    modImplementation include("eu.pb4:placeholder-api:${project.placeholders_version}")

    //Mixin extras
    implementation include("com.github.LlamaLad7:MixinExtras:${project.mixin_extra}")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixin_extra}")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}

build.dependsOn remapMavenJar

tasks.modrinth.dependsOn(tasks.remapMavenJar)

modrinth {
    token = ENV.MODRINTH_TOKEN
    projectId = "amLXPXxi"
    versionNumber = version
    versionName = "[$project.minecraft_version] Subathon - $project.version"
    versionType = "release"
    changelog = ENV.CHANGELOG ?: "No changelog provided"
    gameVersions = [project.minecraft_version]
    loaders = ["fabric"]
    uploadFile = remapJar
    dependencies = [
            new ModDependency("P7dR8mSH", "required"), //FabricAPI
            new ModDependency("CmHD69Pj", "required"), //Twitch4J
            new ModDependency("mOgUt4GM", "optional") //ModMenu
    ]
}
