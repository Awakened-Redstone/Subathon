import com.modrinth.minotaur.dependencies.ModDependency
import net.fabricmc.loom.task.RemapJarTask

import java.text.SimpleDateFormat

plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
    id 'io.freefair.lombok' version '6.6.2'
    id 'maven-publish'
}

loom {
    accessWidenerPath = file("src/main/resources/subathon.accesswidener")
}

def ENV = System.getenv()
def date = new Date()
def sdf = new SimpleDateFormat("yyMMdd-HHmm")

def CHANGELOG = new File('CHANGELOG.md').exists() ? new File('CHANGELOG.md').text : ""

version = project.mod_version + (project.mod_version.contains("dev") ? ".${sdf.format(date)}" : "")
group = project.maven_group

repositories {
    mavenLocal()
    maven { url "https://maven.terraformersmc.com/releases/" } //ModMenu
    maven { url "https://maven.wispforest.io" } //owo-lib
    maven { url "https://maven.awakenedredstone.com" } //Twitch4J (Fabric)
    maven { url "https://maven.nucleoid.xyz/" } //placeholder api
    maven { url "https://maven.ladysnake.org/releases" } //cardinal-components
    //maven { url "https://maven.isxander.dev/releases" } //YACL
    maven { url "https://jitpack.io" } //Mixin extras & Renderer
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modCompileOnly "maven.modrinth:ok-boomer:${project.ok_boomer_version}"

    modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modRuntimeOnly "maven.modrinth:ok-boomer:${project.ok_boomer_version}"

    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
    include "io.wispforest:owo-sentinel:${project.owo_version}"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-api:${project.cardinal_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cardinal_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_version}"

    include modImplementation("com.github.0x3C50:Renderer:${project.renderer}") {
        exclude group: "xml-apis", module: "xml-apis"
        exclude group: "commons-io", module: "commons-io"
    }
    include modImplementation("com.github.KrLite.Equator-v2:build:${project.equator}")

    modImplementation "com.github.twitch4j:twitch4j-fabric:${project.twitch4j_version}"
    modImplementation include("eu.pb4:placeholder-api:${project.placeholders_version}")

    //Mixin extras
    include implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixin_extra}"))
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

tasks.modrinth.dependsOn(tasks.remapJar)

modrinth {
    String projectVersion = project.version.toString()
    if (projectVersion.contains("dev")) {
        System.err.println("Please don't publish a dev version to Modrinth!")
    }

    List<String> projectVersionNumber = projectVersion.split("-", 2)
    String projectVersionName = "Release ${projectVersionNumber[0]}"
    if (projectVersionNumber.size() == 2) {
        List<String> typeNumber = projectVersionNumber[1].split("\\.", 2)
        if (projectVersionNumber[1].startsWith("rc")) {
            projectVersionName = "${projectVersionNumber[0]} - Release Candidate ${typeNumber[1]}"
            versionType = "beta" //Modrinth doesn't have RC so I use beta
        } else if (projectVersionNumber[1].startsWith("beta")) {
            projectVersionName = "${projectVersionNumber[0]} - Beta ${typeNumber[1]}"
            versionType = "beta"
        } else if (projectVersionNumber[1].startsWith("alpha")) {
            projectVersionName = "${projectVersionNumber[0]} - Alpha ${typeNumber[1]}"
            versionType = "alpha"
        }
    }

    token = ENV.MODRINTH_TOKEN
    projectId = "amLXPXxi"
    versionName = projectVersionName
    changelog = CHANGELOG
    uploadFile = remapJar
    dependencies = [
            new ModDependency("fabric-api", "required"), //FabricAPI
            new ModDependency("twitch4j", "required"), //Twitch4J
            new ModDependency("modmenu", "optional") //ModMenu
    ]
}
